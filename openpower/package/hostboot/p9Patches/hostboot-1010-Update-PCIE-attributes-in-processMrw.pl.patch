From e76e6282965959045fe9b78c1c3d3804ea673e21 Mon Sep 17 00:00:00 2001
From: Matt Ploetz <maploetz@us.ibm.com>
Date: Wed, 11 Jan 2017 20:53:25 -0600
Subject: [PATCH v1 1010/1022] Update PCIE attributes in processMrw.pl

Change-Id: I0dd9036eeca2ab0ed5a2fa243fbf038adc0ad1ef
---
 src/usr/targeting/common/Targets.pm    |  59 +++++-
 src/usr/targeting/common/processMrw.pl | 351 +++++++++++++++++----------------
 2 files changed, 231 insertions(+), 179 deletions(-)

diff --git a/src/usr/targeting/common/Targets.pm b/src/usr/targeting/common/Targets.pm
index aa2f036..85cee19 100644
--- a/src/usr/targeting/common/Targets.pm
+++ b/src/usr/targeting/common/Targets.pm
@@ -55,14 +55,14 @@ my %maxInstance = (
     "MCBIST"=> 2,
     "MCS"   => 4,
     "MCA"   => 8,
-    "PHB"   => 6, #PHB is same as PCIE
-    "PEC"   => 3, #PEC is same as PBCQ
+    "PHB"   => 6,
+    "PEC"   => 3,
     "MBA"   => 2,
-    "PPE"   => 51, #Only 21, but they are sparsely populated
-    "PERV"  => 56, #Only 42, but they are sparsely populated
+    "PPE"   => 51,
+    "PERV"  => 56,
     "CAPP"  => 2,
     "SBE"   => 1,
-    "NV"    => 6, #FW only for GARD purposes
+    "NV"    => 6,
     "MI"    => 4,
     "OCC"   => 1,
 );
@@ -233,7 +233,7 @@ sub printAttribute
     $filter{ENABLE_CAPI}                                            = 1;
     $filter{PCIE_CONFIG_NUM}                                        = 1;
     $filter{PCIE_LANE_MASK}                                         = 1;
-    $filter{PCIE_LANE_SET}                                          = 1;
+    $filter{PCIE_LANE_GROUP}                                        = 1;
     $filter{PCIE_NUM_LANES}                                         = 1;
     $filter{PHB_NUM}                                                = 1;
     $filter{IOP_NUM}                                                = 1;
@@ -294,9 +294,24 @@ sub printAttribute
     $filter{CARD_TYPE}                                              = 1;
     $filter{PROC_PCIE_DSMP_CAPABLE}                                 = 1;
     $filter{PROC_PCIE_IOP_CONFIG}                                   = 1;
+    $filter{PROC_PCIE_IOP_G2_PLL_CONTROL0}                          = 1;
+    $filter{PROC_PCIE_IOP_G3_PLL_CONTROL0}                          = 1;
+    $filter{PROC_PCIE_IOP_PCS_CONTROL0}                             = 1;
+    $filter{PROC_PCIE_IOP_PCS_CONTROL1}                             = 1;
+    $filter{PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0}                      = 1;
+    $filter{PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1}                      = 1;
     $filter{PROC_PCIE_IOP_REVERSAL}                                 = 1;
     $filter{PROC_PCIE_IOP_REVERSAL_BIFURCATED}                      = 1;
     $filter{PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED}                  = 1;
+    $filter{PROC_PCIE_IOP_RX_PEAK}                                  = 1;
+    $filter{PROC_PCIE_IOP_RX_SDL}                                   = 1;
+    $filter{PROC_PCIE_IOP_RX_VGA_CONTROL2}                          = 1;
+    $filter{PROC_PCIE_IOP_TX_BWLOSS1}                               = 1;
+    $filter{PROC_PCIE_IOP_TX_FFE_GEN1}                              = 1;
+    $filter{PROC_PCIE_IOP_TX_FFE_GEN2}                              = 1;
+    $filter{PROC_PCIE_IOP_TX_FIFO_OFFSET}                           = 1;
+    $filter{PROC_PCIE_IOP_TX_RCVRDETCNTL}                           = 1;
+    $filter{PROC_PCIE_IOP_ZCAL_CONTROL}                             = 1;
     $filter{NPU_MMIO_BAR_SIZE}                                      = 1;
     $filter{NPU_MMIO_BAR_BASE_ADDR}                                 = 1;
     $filter{PROC_PCIE_REFCLOCK_ENABLE}                              = 1;
@@ -305,10 +320,12 @@ sub printAttribute
     $filter{STANDBY_PLUGGABLE}                                      = 1;
     $filter{CPM_INFLECTION_POINTS}                                  = 1;
     $filter{PROC_FABRIC_X_ATTACHED_CHIP_CNFG}                       = 1;
+    $filter{PROC_PCIE_HOTPLUG_DISABLE_ACTIONS}                      = 1;
     $filter{SYSTEM_RESCLK_VALUE}                                    = 1;
     $filter{HWAS_STATE}                                             = 1;
     $filter{PROC_MIRROR_SIZES}                                      = 1;
     $filter{PROC_FABRIC_X_ADDR_DIS}                                 = 1;
+    $filter{PROC_PCIE_HOTPLUG_ENABLE_ACTIONS}                       = 1;
     $filter{PROC_FABRIC_A_ATTACHED_LINK_ID}                         = 1;
     $filter{PROC_MEM_BASES}                                         = 1;
     $filter{UNIT_TEST_MCA_MEMORY_SIZES}                             = 1;
@@ -1614,6 +1631,22 @@ sub renameAttribute
     return 0;
 }
 
+## remove an attribute from a target
+sub removeAttribute
+{
+    my $self = shift;
+    my $target = shift;
+    my $attribute = shift;
+
+    my $target_ptr = $self->{data}->{TARGETS}->{$target};
+    if (!defined($target_ptr->{ATTRIBUTES}->{$attribute}))
+    {
+        return 1;
+    }
+    delete($target_ptr->{ATTRIBUTES}->{$attribute});
+    $self->log($target, "Removing attribute: $attribute");
+}
+
 ## copy an attribute between targets
 sub copyAttribute
 {
@@ -1673,6 +1706,20 @@ sub getAttributeField
 }
 
 ## returns an attribute from a bus
+sub setBusAttribute
+{
+    my $self       = shift;
+    my $target     = shift;
+    my $busnum     = shift;
+    my $attr       = shift;
+    my $value      = shift;
+    my $target_ptr = $self->getTarget($target);
+    $target_ptr->{CONNECTION}->{BUS}->[$busnum]->{bus_attribute}->{$attr}->{default}
+        = $value;
+    $self->log($target, "Setting Attribute (BusNum=$busnum): $attr=$value");
+}
+
+## returns an attribute from a bus
 sub getBusAttribute
 {
     my $self       = shift;
diff --git a/src/usr/targeting/common/processMrw.pl b/src/usr/targeting/common/processMrw.pl
index e9b6366..13be78f 100644
--- a/src/usr/targeting/common/processMrw.pl
+++ b/src/usr/targeting/common/processMrw.pl
@@ -475,13 +475,15 @@ sub processProcessor
         {
             processFsi($targetObj, $child, $target);
         }
-        elsif ($child_type eq "PCI_CONFIGS")
+        elsif ($child_type eq "PEC")
         {
-            foreach my $pci_child (@{ $targetObj->getTargetChildren($child) })
-            {
-                #@TODO RTC:161404
+            print "Matt TRACE processing PEC named $child\n";
+            processPec($targetObj, $child, $target);
+            #foreach my $pci_child (@{ $targetObj->getTargetChildren($child) })
+            #{
+                #print "Matt TRACE processing PCI child of PEC $child named $pci_child\n";
                 #processPcie($targetObj, $pci_child, $target);
-            }
+            #}
         }
         elsif ($child_type eq "MCBIST")
         {
@@ -880,15 +882,15 @@ sub processFsi
 }
 
 #--------------------------------------------------
-## PCIE
+## PEC
 ##
 ## Creates attributes from abstract PCI attributes on bus
 
-sub processPcie
+sub processPec
 {
     my $targetObj    = shift;
-    my $target       = shift;
-    my $parentTarget = shift;
+    my $target       = shift; # PEC
+    my $parentTarget = shift; # PROC
 
 
     ## process pcie config target
@@ -898,80 +900,57 @@ sub processPcie
     ## Get config children
     my @lane_swap;
     $lane_swap[0][0] = 0;
-    $lane_swap[0][1] = 0;
     $lane_swap[1][0] = 0;
-    $lane_swap[1][1] = 0;
     $lane_swap[2][0] = 0;
-    $lane_swap[2][1] = 0;
+    $lane_swap[3][0] = 0;
 
     my @lane_mask;
     $lane_mask[0][0] = "0x0000";
-    $lane_mask[0][1] = "0x0000";
     $lane_mask[1][0] = "0x0000";
-    $lane_mask[1][1] = "0x0000";
     $lane_mask[2][0] = "0x0000";
-    $lane_mask[2][1] = "0x0000";
+    $lane_mask[3][0] = "0x0000";
 
     my @lane_rev;
     $lane_rev[0][0] = "";
-    $lane_rev[0][1] = "";
     $lane_rev[1][0] = "";
-    $lane_rev[1][1] = "";
     $lane_rev[2][0] = "";
-    $lane_rev[2][1] = "";
+    $lane_rev[3][0] = "";
 
     my @is_slot;
     $is_slot[0][0] = 0;
-    $is_slot[0][1] = 0;
     $is_slot[1][0] = 0;
-    $is_slot[1][1] = 0;
     $is_slot[2][0] = 0;
-    $is_slot[2][1] = 0;
+    $is_slot[3][0] = 0;
 
     my $phb_config = "00000000";
 
     my %cfg_check;
     my @equalization;
 
-    my $wiring_table = $targetObj->getAttribute($target,"PCIE_LANE_SWAP_TABLE");
-    $wiring_table=~s/\s+//g;
-    $wiring_table=~s/\t+//g;
-    $wiring_table=~s/\n+//g;
+    #my $wiring_table = $targetObj->getAttribute($target,"PCIE_LANE_SWAP_TABLE");
+    #$wiring_table=~s/\s+//g;
+    #$wiring_table=~s/\t+//g;
+    #$wiring_table=~s/\n+//g;
 
-    my @t = split(/,/,$wiring_table);
-    my %iop_swap;
+    #my @t = split(/,/,$wiring_table);
+    #my %iop_swap;
 
     #iop_swap{iop}{clk swap}{clk group reversal}
-    $iop_swap{0}{0}{'00'}=$t[0];
-    $iop_swap{0}{0}{'10'}=$t[1];
-    $iop_swap{0}{0}{'01'}=$t[2];
-    $iop_swap{0}{0}{'11'}=$t[3];
-    $iop_swap{0}{1}{'00'}=$t[4];
-    $iop_swap{0}{1}{'10'}=$t[5];
-    $iop_swap{0}{1}{'01'}=$t[6];
-    $iop_swap{0}{1}{'11'}=$t[7];
-
-    $iop_swap{1}{0}{'00'}=$t[8];
-    $iop_swap{1}{0}{'10'}=$t[9];
-    $iop_swap{1}{0}{'01'}=$t[10];
-    $iop_swap{1}{0}{'11'}=$t[11];
-    $iop_swap{1}{1}{'00'}=$t[12];
-    $iop_swap{1}{1}{'10'}=$t[13];
-    $iop_swap{1}{1}{'01'}=$t[14];
-    $iop_swap{1}{1}{'11'}=$t[15];
-
-
-    $iop_swap{2}{0}{'00'}=$t[16];
-    $iop_swap{2}{0}{'01'}=$t[17];
-    $iop_swap{2}{0}{'10'}=$t[18];
-    $iop_swap{2}{0}{'11'}=$t[19];
-    $iop_swap{2}{1}{'00'}=$t[20];
-    $iop_swap{2}{1}{'10'}=$t[21];
-    $iop_swap{2}{1}{'01'}=$t[22];
-    $iop_swap{2}{1}{'11'}=$t[23];
+    #$iop_swap{0}{0}{'00'}=$t[0];
+    #$iop_swap{0}{0}{'10'}=$t[1];
+    #$iop_swap{0}{0}{'01'}=$t[2];
+    #$iop_swap{0}{0}{'11'}=$t[3];
+    #$iop_swap{0}{1}{'00'}=$t[4];
+    #$iop_swap{0}{1}{'10'}=$t[5];
+    #$iop_swap{0}{1}{'01'}=$t[6];
+    #$iop_swap{0}{1}{'11'}=$t[7];
+    #$iop_swap{0}{2}{'00'}=$t[8];
+    #$iop_swap{0}{2}{'10'}=$t[9];
+    #$iop_swap{0}{2}{'01'}=$t[10];
+    #$iop_swap{0}{2}{'11'}=$t[11];
 
     my @lane_eq;
-    my $NUM_PHBS=4;
+    my $NUM_PHBS=6;
     for (my $p=0;$p<$NUM_PHBS;$p++)
     {
         for (my $lane=0;$lane<16;$lane++)
@@ -980,133 +959,159 @@ sub processPcie
         }
     }
     my $found=0;
-    foreach my $child (@{ $targetObj->getTargetChildren($target) })
+    foreach my $pec_config_child (@{ $targetObj->getTargetChildren($target) }) # pec2_x8_x4_x4_config PEC CONFIGS
     {
-        my $num_connections = $targetObj->getNumConnections($child);
-        if ($num_connections > 0)
+        print "Matt TRACE 1 processing child  name $pec_config_child\n";
+        foreach my $phb_child (@{ $targetObj->getTargetChildren($pec_config_child) }) # PHB3_x8
         {
-            $found=1;
-            my $pci_endpoint=$targetObj->getFirstConnectionDestination($child);
-
-            my $bus = $targetObj->getConnectionBus($target, 0);
-            my $iop_num = $targetObj->getAttribute($child, "IOP_NUM");
-            my $swap_clks=$targetObj->getBusAttribute($child, 0,
-                         "PCIE_SWAP_CLKS");
-
-            my $lane_rev=$targetObj->getBusAttribute($child, 0,
-                         "LANE_REVERSAL");
-
-            my $phb_num = $targetObj->getAttribute($child, "PHB_NUM");
-            my $lane_set = $targetObj->getAttribute($child, "PCIE_LANE_SET");
-            my $capi = $targetObj->getAttribute($child, "ENABLE_CAPI");
-
-            my $pci_endpoint_type =
-              $targetObj->getAttribute(
-                $targetObj->getTargetParent($pci_endpoint), "CLASS");
-
-            if ($pci_endpoint_type eq "CARD")
-            {
-                $is_slot[$iop_num][$lane_set] = 1;
-            }
-            $lane_swap[$iop_num][$lane_set] =
-              $targetObj->getBusAttribute($child, 0, "PCIE_SWAP_CLKS");
-            $lane_mask[$iop_num][$lane_set] =
-              $targetObj->getAttribute($child, "PCIE_LANE_MASK");
-            $lane_rev[$iop_num][$lane_set] =
-              $targetObj->getBusAttribute($child, 0, "LANE_REVERSAL");
-            my $eq = $targetObj->getBusAttribute($child, 0,
-              "PCIE_LANE_EQUALIZATION");
-            my @eqs = split(/\,/,$eq);
-            for (my $e=0;$e<@eqs;$e=$e+3)
+            print "Matt TRACE 2 processing child2 name $phb_child\n";
+            foreach my $phb_config_child (@{ $targetObj->getTargetChildren($phb_child) }) # phb0_x16_pci 
             {
-                if ($eqs[$e] eq "all")
+                
+                print "Matt TRACE 3 processing child3 name $phb_config_child\n";
+                my $num_connections = $targetObj->getNumConnections($phb_config_child);
+                if ($num_connections > 0)
                 {
-                    for (my $lane=0;$lane<16;$lane++)
+                    # We have a PHB conncetion, we need to create the PEC attributes
+                    print "Matt TRACE found connection \n";
+                    $found=1;
+
+                    my $iop_num = $targetObj->getAttribute($phb_config_child, "IOP_NUM");
+                    print "Matt TRACE IOP num is  $iop_num \n";
+
+                    my $phb_num = $targetObj->getAttribute($phb_config_child, "PHB_NUM");
+                    print "Matt TRACE PHB num is  $phb_num \n";
+                    my $lane_group = $targetObj->getAttribute($phb_config_child, "PCIE_LANE_GROUP");
+                    print "Matt TRACE LANE GROUP num is  $lane_group \n";
+
+                    my $pci_endpoint=$targetObj->getFirstConnectionDestination($phb_config_child);
+                    my $pci_endpoint_type =
+                        $targetObj->getAttribute(
+                            $targetObj->getTargetParent($pci_endpoint), "CLASS");
+
+                    print "Matt TRACE PCI endpoint is  $pci_endpoint \n";
+                    print "Matt TRACE PCI endpoint type is  $pci_endpoint_type \n";
+                    if ($pci_endpoint_type eq "CARD")
                     {
-                        $equalization[$phb_num][$lane]=
-                              $eqs[$e+1].",".$eqs[$e+2];
+                        $is_slot[$lane_group][0] = 1;
                     }
+                    $lane_swap[$lane_group][0] =
+                        $targetObj->getBusAttribute($phb_config_child, 0, "PCIE_SWAP_CLKS");
+                    $lane_mask[$lane_group][0] =
+                        $targetObj->getAttribute($phb_config_child, "PCIE_LANE_MASK");
+                    $lane_rev[$lane_group][0] =
+                        $targetObj->getBusAttribute($phb_config_child, 0, "LANE_REVERSAL");
+
+                    my $pci_endpoint_type =
+                        $targetObj->getAttribute(
+                            $targetObj->getTargetParent($pci_endpoint), "CLASS");
+
+                    my $eq = $targetObj->getBusAttribute($phb_config_child, 0,
+                        "PCIE_LANE_EQUALIZATION");
+                    my @eqs = split(/\,/,$eq);
+                    for (my $e=0;$e<@eqs;$e=$e+3)
+                    {
+                        if ($eqs[$e] eq "all")
+                        {
+                            for (my $lane=0;$lane<16;$lane++)
+                            {
+                                $equalization[$phb_num][$lane]=
+                                    $eqs[$e+1].",".$eqs[$e+2];
+                            }
+                        }
+                        else
+                        {
+                            $equalization[$phb_num][$eqs[$e]] =
+                                $eqs[$e+1].",".$eqs[$e+2];
+                        }
+                    }
+
+                    my $swap_clks=$targetObj->getBusAttribute($phb_config_child, 0,
+                        "PCIE_SWAP_CLKS");
+
+                    my $lane_rev=$targetObj->getBusAttribute($phb_config_child, 0,
+                        "LANE_REVERSAL");
+
+                    # TODO Needed?
+                    #my $capi = $targetObj->getAttribute($child3, "ENABLE_CAPI");
+
+                    $targetObj->setAttribute($parentTarget, "PROC_PCIE_PHB_ACTIVE","0x0");
+                    print "Matt TRACE LANE mask 0,0 is $lane_mask[0][0] \n";
+                    print "Matt TRACE LANE mask 1,0 is $lane_mask[1][0] \n";
+                    print "Matt TRACE LANE mask 2,0 is $lane_mask[2][0] \n";
+                    print "Matt TRACE LANE mask 3,0 is $lane_mask[3][0] \n";
+                    my $lane_mask_attr = sprintf("%s,%s,%s,%s",
+                        $lane_mask[0][0], $lane_mask[1][0], $lane_mask[2][0], $lane_mask[3][0]);
+                    $targetObj->setAttribute($target, "PROC_PCIE_LANE_MASK",
+                        $lane_mask_attr);
+                    $targetObj->setAttribute($target,"PEC_PCIE_LANE_MASK_NON_BIFURCATED",
+                        $lane_mask_attr);
+                    $targetObj->setAttribute($target, "PEC_PCIE_LANE_MASK_BIFURCATED",
+                        "0,0,0,0");
+
+                    #TODO  Can't do swap stuff until wiring table is fixed
+                    # my @iop_swap_lu;
+                    # my @iop_lane_swap;
+                    # for (my $iop=0;$iop<3;$iop++)
+                    # {
+                    #     $iop_lane_swap[$iop] = $lane_swap[$iop][0] | $lane_swap[$iop][1];
+                    #     my $lane_rev = $lane_rev[$iop][0].$lane_rev[$iop][1];
+                    #     $iop_swap_lu[$iop]=
+                    #         "0b".$iop_swap{$iop}{$iop_lane_swap[$iop]}{$lane_rev};
+                    #     if ($iop_swap_lu[$iop] eq "") {
+                    #       die "PCIE config for $iop,$iop_lane_swap[$iop],$lane_rev not found\n";
+                    #     }
+                    # }
+
+                    # my $lane_rev_attr0 = sprintf("%s,%s,%s",
+                    #                         oct($iop_swap_lu[0]),
+                    #                         oct($iop_swap_lu[1]),
+                    #                         oct($iop_swap_lu[2]));
+                    # my $lane_rev_attr1 = sprintf("%s,0,%s,0,%s,0",
+                    #                         oct($iop_swap_lu[0]),
+                    #                         oct($iop_swap_lu[1]),
+                    #                         oct($iop_swap_lu[2]));
+
+                    # $targetObj->setAttribute($target, "PROC_PCIE_IOP_SWAP",
+                    #     $lane_rev_attr0);
+                    # $targetObj->setAttribute($target, "PEC_PCIE_IOP_SWAP_NON_BIFURCATED",
+                    #     $lane_rev_attr1);
+                    $targetObj->setAttribute($target, "PEC_PCIE_IOP_SWAP_BIFURCATED",
+                        "0");
+                    $targetObj->setAttribute($target, "PEC_PCIE_IOP_REVERSAL",
+                        "0");
+                    $targetObj->setAttribute($target,
+                        "PEC_PCIE_IOP_REVERSAL_NON_BIFURCATED","0");
+                    $targetObj->setAttribute($target, "PEC_PCIE_IOP_REVERSAL_BIFURCATED",
+                        "0");
+
+                    # TODO Needed?
+                    #my $is_slot_attr = sprintf("%s,%s,%s,%s,%s,%s",
+                    #                    $is_slot[0][0], $is_slot[0][1],
+                    #                    $is_slot[1][0], $is_slot[1][1],
+                    #                    $is_slot[2][0], $is_slot[2][1]);
+                    #$targetObj->setAttribute($target, "PROC_PCIE_IS_SLOT", $is_slot_attr);
+
+                    #my $eq_str="";
+                    #for (my $p=0;$p<$NUM_PHBS;$p++)
+                    #{
+                    #    for (my $lane=0;$lane<16;$lane++)
+                    #    {
+                    #        $eq_str=$eq_str.$equalization[$p][$lane].",";
+                    #    }
+                    #}
+                    #$eq_str = substr($eq_str,0,length($eq_str)-1);
+                    #$targetObj->setAttribute($target,"PROC_PCIE_LANE_EQUALIZATION",
+                    #     $eq_str);
+
                 }
                 else
                 {
-                    $equalization[$phb_num][$eqs[$e]] =
-                              $eqs[$e+1].",".$eqs[$e+2];
-                }
-            }
-            substr($phb_config, $phb_num, 1, "1");
-        }
-    }
-    if ($found)
-    {
-    my $hex = sprintf('%X', oct("0b$phb_config"));
-
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_PHB_ACTIVE","0x" . $hex);
-    my $lane_mask_attr = sprintf("%s,%s,%s,%s,%s,%s",
-        $lane_mask[0][0], $lane_mask[0][1],
-        $lane_mask[1][0], $lane_mask[1][1],
-        $lane_mask[2][0], $lane_mask[2][1]);
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_LANE_MASK",
-        $lane_mask_attr);
-    $targetObj->setAttribute($parentTarget,"PROC_PCIE_LANE_MASK_NON_BIFURCATED",
-        $lane_mask_attr);
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_LANE_MASK_BIFURCATED",
-        "0,0,0,0");
-
-    my @iop_swap_lu;
-    my @iop_lane_swap;
-    for (my $iop=0;$iop<3;$iop++)
-    {
-        $iop_lane_swap[$iop] = $lane_swap[$iop][0] | $lane_swap[$iop][1];
-        my $lane_rev = $lane_rev[$iop][0].$lane_rev[$iop][1];
-        $iop_swap_lu[$iop]=
-                 "0b".$iop_swap{$iop}{$iop_lane_swap[$iop]}{$lane_rev};
-        if ($iop_swap_lu[$iop] eq "") {
-          die "PCIE config for $iop,$iop_lane_swap[$iop],$lane_rev not found\n";
-        }
-    }
-
-    my $lane_rev_attr0 = sprintf("%s,%s,%s",
-                            oct($iop_swap_lu[0]),
-                            oct($iop_swap_lu[1]),
-                            oct($iop_swap_lu[2]));
-    my $lane_rev_attr1 = sprintf("%s,0,%s,0,%s,0",
-                            oct($iop_swap_lu[0]),
-                            oct($iop_swap_lu[1]),
-                            oct($iop_swap_lu[2]));
-
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IOP_SWAP",
-        $lane_rev_attr0);
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IOP_SWAP_NON_BIFURCATED",
-        $lane_rev_attr1);
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IOP_SWAP_BIFURCATED",
-        "0,0,0,0");
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IOP_REVERSAL",
-        "0,0,0,0");
-    $targetObj->setAttribute($parentTarget,
-        "PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED","0,0,0,0");
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IOP_REVERSAL_BIFURCATED",
-        "0,0,0,0");
-
-    my $is_slot_attr = sprintf("%s,%s,%s,%s,%s,%s",
-                        $is_slot[0][0], $is_slot[0][1],
-                        $is_slot[1][0], $is_slot[1][1],
-                        $is_slot[2][0], $is_slot[2][1]);
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_IS_SLOT", $is_slot_attr);
-
-    ## don't support DSMP
-    $targetObj->setAttribute($parentTarget, "PROC_PCIE_DSMP_CAPABLE","0,0,0,0");
-    my $eq_str="";
-    for (my $p=0;$p<$NUM_PHBS;$p++)
-    {
-        for (my $lane=0;$lane<16;$lane++)
-        {
-            $eq_str=$eq_str.$equalization[$p][$lane].",";
-        }
-    }
-    $eq_str = substr($eq_str,0,length($eq_str)-1);
-    $targetObj->setAttribute($parentTarget,"PROC_PCIE_LANE_EQUALIZATION",
-         $eq_str);
-    }
+                    print("Matt trace did NOT find a connection\n");
+                } # End found connection    
+            } # End phb0_x16_pci
+        } # End PHB3_x8
+    } # end PEC CONFIGS
 }
 #--------------------------------------------------
 ## OCC
-- 
1.8.2.2

